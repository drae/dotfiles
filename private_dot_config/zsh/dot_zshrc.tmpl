#!/usr/bin/env zsh
# vim: ft=zsh ts=2 sw=2

## History
export HISTFILE="${XDG_DATA_HOME}/zsh/history"
declare -r HISTFILE
export HISTSIZE=50000
export SAVEHIST=20000

setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
setopt share_history
setopt combining_chars

## zinit
declare -A ZINIT
ZINIT[HOME_DIR]="${XDG_DATA_HOME}/zinit"
ZINIT[ZCOMPDUMP_PATH]="${XDG_CACHE_HOME}/zsh/zcompdump-${ZSH_VERSION}"
ZINIT[COMPINIT_OPTS]='-C'

if [[ ! -f ${ZINIT[HOME_DIR]}/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "${ZINIT[HOME_DIR]}/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Install some zinit helpers
zinit wait lucid light-mode for \
  zinit-zsh/z-a-rust \
  zinit-zsh/z-a-as-monitor \
  zinit-zsh/z-a-meta-plugins \
  zinit-zsh/z-a-bin-gem-node

zinit lucid for \
  'OMZ::lib/history.zsh' \
  'OMZ::lib/key-bindings.zsh' \
  'OMZ::lib/completion.zsh' \
  'OMZ::plugins/kubectl/kubectl.plugin.zsh' \
  'romkatv/zsh-prompt-benchmark'

zinit wait lucid for \
  atload'_zsh_autosuggest_start' 'zsh-users/zsh-autosuggestions' \
  'zsh-users/zsh-history-substring-search' \
  'zdharma/history-search-multi-word' \
  atinit'zpcompinit; zpcdreplay' 'zdharma/fast-syntax-highlighting' \
  'MichaelAquilina/zsh-history-filter'

# Load starship theme
zinit ice as"command" from"gh-r" atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" atpull"%atclone" src"init.zsh"
zinit light starship/starship

# Little notification of aliases
zinit light djui/alias-tips

# Window title support
zinit light mdarocha/zsh-windows-title

# direnv support
zinit ice as"program" make'!' atclone'./direnv hook zsh > zhook.zsh' \
  atpull'%atclone' src"zhook.zsh"
zinit light direnv/direnv

# FZF
zinit ice lucid wait'0b' from'gh-r' as'program'
zinit light junegunn/fzf
zinit ice lucid wait'0c' as'command' pick'bin/fzf-tmux'
zinit light junegunn/fzf
zinit ice lucid wait'0c' multisrc'shell/{completion,key-bindings}.zsh' id-as'junegunn/fzf_completions' pick'/dev/null'
zinit light junegunn/fzf

# FZF-TAB
zinit ice wait'1' lucid
zinit light Aloxaf/fzf-tab

# Sharkdp's find and cat replacements
zinit ice as'program' id-as'fd' from'gh-r' mv'fd* -> fd' cp'fd/autocomplete/_fd -> _fd' pick'fd/fd'
zinit light sharkdp/fd
zinit ice as'program' id-as'bat' from'gh-r' mv'bat* -> bat' cp'bat/autocomplete/bat.zsh -> _bat' pick'bat/bat' atload'alias cat=bat'
zinit light sharkdp/bat

# Install github cli (gh)
zinit ice lucid as'command' from'gh-r' atclone'./gh completion -s zsh > _gh' atpull'%atclone' mv'**/bin/gh* -> gh' pick'usr/bin/gh'
zinit light cli/cli

# Install Kubernetes Krew command
zinit ice lucid as'command' from'gh-r' mv'krew* -> krew' pick 'krew'
zinit light kubernetes-sigs/krew

# Loads of extra git modules
zinit ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX" nocompile
zinit light tj/git-extras

# Start ssh-agent 
zinit light bobsoppe/zsh-ssh-agent

# procs (modern replacement for ps written in rust)
zinit wait'1' lucid \
  from'gh-r' as'program' \
  atload'alias ps=procs' \
  mv'**/procs -> procs' \
  pick'procs' \
  light-mode for @dalance/procs

# Prettyping
zinit ice wait lucid as'program' mv'prettyping* -> prettyping' \
    atload"alias ping='prettyping --nolegend'"
zinit light denilsonsa/prettyping

# delta
zinit wait'1' lucid \
  as'program' id-as'delta' from'gh-r' mv'delta* -> delta' pick'delta/delta' \
  light-mode for @dandavison/delta
zinit ice wait'1' lucid as'delta-completion' has'delta' mv'completion.zsh -> _delta'
zinit snippet https://github.com/dandavison/delta/blob/master/etc/completion/completion.zsh

# cheat.sh
zinit wait'2a' lucid \
  id-as'cht.sh' \
  as'program' \
  for https://cht.sh/:cht.sh
  # has'rlwrap' \
zinit wait'2b' lucid \
  id-as'cht-completion' \
  has'rlwrap' \
  mv'cht* -> _cht' \
  as'completion' \
  for https://cheat.sh/:zsh
# cheat
zinit wait'2a' lucid \
  id-as'cheat' \
  from'gh-r' \
  mv'cheat* -> cheat' \
  pick'cheat' \
  as'program' \
  for @cheat/cheat
zinit wait'2b' lucid \
  id-as'cheat-completion' \
  mv'cheat* -> _cheat' \
  as'completion' \
  for https://github.com/cheat/cheat/blob/master/scripts/cheat.zsh

#
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Support Windows Terminal duplication 
{{ if (eq .chezmoi.os "linux") }}
  {{ if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
    set_wt_cwd() { printf "\e]9;9;%s\e\\" "$(wslpath -m "$PWD")" }
    precmd_functions+=set_wt_cwd
  {{ end }}
{{ end }}

# FZF options

# Use fd instead of find for file completion
_fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
}

FD_OPTIONS="--follow --hidden --exclude .git --exclude node_modules"

export FZF_DEFAULT_OPTS='--bind ctrl-d:page-down,ctrl-u:page-up'
#export FZF_DEFAULT_OPTS="
#--color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D
#--color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C
#--color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D
#--no-mouse --height 40% -1 --reverse --multi --inline-info --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -300' --preview-window='right:hidden:wrap' --bind='f3:execute(bat --style=numbers {} || less -f {}),f2:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {+} | pbcopy)'"
# Exclude those directories even if not listed in .gitignore, or if .gitignore is missing
# Change find backend / Use 'git ls-files' when inside GIT repo, or fd otherwise
export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard | fd --type f --type l $FD_OPTIONS"
# Find commands for "Ctrl+T" and "Opt+C" shortcuts
export FZF_CTRL_T_COMMAND="fdfind $FD_OPTIONS"
export FZF_ALT_C_COMMAND="fdfind --type d $FD_OPTIONS"

# Other sources
source $ZDOTDIR/aliases.zsh
